#
# CMake top-level configuration of SLProject
#

cmake_minimum_required(VERSION 3.3 FATAL_ERROR)

if (APPLE)
    set(CMAKE_MACOSX_RPATH OFF)
endif (APPLE)

set(SL_PROJECT_ROOT "${CMAKE_CURRENT_SOURCE_DIR}")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${SL_PROJECT_ROOT}/cmake/")

# Register general cmake commands (set_policy, source_group_by_path, list_extract)
include(cmake/CustomCommands.cmake)

# The FOLDER properties are needed in Visual Studio and XCode generated projects for nested folders
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "")

set_policy(CMP0111 OLD) # Avoids warnings for new policy CMP0111 from cmake 3.19 onwards

set(META_PROJECT_NAME "SLProject")

# Declare project
project(${META_PROJECT_NAME} C CXX)

# Set output directories
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})

option(SL_DOWNLOAD_PREBUILTS "Specifies if prebuilt libraries should be downloaded" ON)
option(SL_BUILD_WAI "Specifies if the WAI library should be built" ON)
option(SL_BUILD_APPS "Specifies if sample apps should be built" ON)
option(SL_BUILD_EXERCISES "Specifies if exercise apps should be built" ON)
option(SL_BUILD_VULKAN_APPS "Specifies if vulkan apps should be built" OFF)
option(SL_BUILD_WITH_OPTIX "Specifies if Optix renderer should be built" OFF)
option(SL_BUILD_WITH_KTX "Specifies if Kronos Texture library (ktx) should be used" ON)
option(SL_BUILD_WITH_OPENSSL "Specifies if OpenSSL should be used" ON)
option(SL_BUILD_WITH_ASSIMP "Specifies if Assimp should be used" ON)
option(LIBIGL_USE_STATIC_LIBRARY "Specifies if LibIGL should be built statically" ON)

message(STATUS "SL_DOWNLOAD_PREBUILTS: ${SL_DOWNLOAD_PREBUILTS}")
message(STATUS "SL_BUILD_WAI: ${SL_BUILD_WAI}")
message(STATUS "SL_BUILD_APPS: ${SL_BUILD_APPS}")
message(STATUS "SL_BUILD_EXERCISES: ${SL_BUILD_EXERCISES}")
message(STATUS "SL_BUILD_VULKAN_APPS: ${SL_BUILD_VULKAN_APPS}")
message(STATUS "SL_BUILD_WITH_OPTIX: ${SL_BUILD_WITH_OPTIX}")
message(STATUS "SL_BUILD_WITH_KTX: ${SL_BUILD_WITH_KTX}")
message(STATUS "SL_BUILD_WITH_OPENSSL: ${SL_BUILD_WITH_OPENSSL}")
message(STATUS "SL_BUILD_WITH_ASSIMP: ${SL_BUILD_WITH_ASSIMP}")
message(STATUS "LIBIGL_USE_STATIC_LIBRARY: ${LIBIGL_USE_STATIC_LIBRARY}")

include(cmake/SetGitBranchNameAndCommitID.cmake)
include(cmake/CompileOptions.cmake)
include(cmake/ConfigureMSVCCLion.cmake)
include(cmake/ConfigureClangCl.cmake)

if (SL_DOWNLOAD_PREBUILTS)
    include(cmake/DownloadPrebuilts.cmake)
endif ()

if ("${CMAKE_SYSTEM_NAME}" MATCHES "Android")
    message(STATUS "SL_APP: ${SL_APP}")
    option(SL_APP
            "Specifies which sample app should be built (used for android)"
            SL_APP_ALL)
endif ()

if ("${SYSTEM_NAME_UPPER}" MATCHES "EMSCRIPTEN")
    add_link_options("-sALLOW_MEMORY_GROWTH=1" "-sASYNCIFY" "-sASSERTIONS")
    #add_compile_options("-fsanitize=address")
    #add_link_options("-fsanitize=address")
endif ()

add_subdirectory(modules/sens)
add_subdirectory(modules/sl)
add_subdirectory(modules/math)
add_subdirectory(modules/utils)
#add_subdirectory(experimental)
if (SL_BUILD_WAI)
    add_subdirectory(modules/wai)
endif ()

if (SL_BUILD_APPS)
    add_subdirectory(apps)
endif ()
